#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharynaGP.Pages
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class create : createBase
{

#line hidden

public override void Execute()
{
WriteLiteral("\n\n<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/lib/bootstrap/dist/css/bootstrap.min.css")
, false)
);
WriteLiteral(" />\n<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/css/style.css")
, false)
);
WriteLiteral(" asp-append-version=\"true\"");

WriteLiteral(" />\n<link");

WriteLiteral(" rel=\"stylesheet\"");

WriteAttribute ("href", " href=\"", "\""
, Tuple.Create<string,object,bool> ("", Href("~/Sharyna.style.css")
, false)
);
WriteLiteral(" asp-append-version=\"true\"");

WriteLiteral(" />\n<script");

WriteLiteral(" src=\"https://cdn.startbootstrap.com/sb-forms-latest.js\"");

WriteLiteral("></script>\n<html>\n<body>\n    <h1");

WriteLiteral(" style=\"font-size:large\"");

WriteLiteral("grid-column-start\">Fill in your Car info for selling Ad</h1>\n    <br />\n    <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n        <form");

WriteLiteral(" id=\"contactForm\"");

WriteLiteral(" data-sb-form-api-token=\"API_TOKEN\"");

WriteLiteral(">\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <select");

WriteLiteral(" class=\"form-select\"");

WriteLiteral(" id=\"brand\"");

WriteLiteral(" aria-label=\"Brand\"");

WriteLiteral(">\n                    <option");

WriteLiteral(" value=\"BMW\"");

WriteLiteral(">BMW</option>\n                    <option");

WriteLiteral(" value=\"Ford\"");

WriteLiteral(">Ford</option>\n                    <option");

WriteLiteral(" value=\"Mazda\"");

WriteLiteral(">Mazda</option>\n                </select>\n                <label");

WriteLiteral(" for=\"brand\"");

WriteLiteral("></label>\n            </div>\n          \n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <select");

WriteLiteral(" class=\"form-select\"");

WriteLiteral(" id=\"model\"");

WriteLiteral(" aria-label=\"Model\"");

WriteLiteral(">\n                    <option");

WriteLiteral(" value=\"730\"");

WriteLiteral(">730</option>\n                    <option");

WriteLiteral(" value=\"740\"");

WriteLiteral(">740</option>\n                    <option");

WriteLiteral(" value=\"750\"");

WriteLiteral(">750</option>\n                    <option");

WriteLiteral(" value=\"6\"");

WriteLiteral(">6</option>\n                    <option");

WriteLiteral(" value=\"Bronco\"");

WriteLiteral(">Bronco</option>\n                </select>\n                <label");

WriteLiteral(" for=\"model\"");

WriteLiteral("></label>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <select");

WriteLiteral(" class=\"form-select\"");

WriteLiteral(" id=\"gear\"");

WriteLiteral(" aria-label=\"Gear\"");

WriteLiteral(">\n                    <option");

WriteLiteral(" value=\"Automatic\"");

WriteLiteral(">Automatic</option>\n                    <option");

WriteLiteral(" value=\"Manual\"");

WriteLiteral(">Manual</option>\n                </select>\n                <label");

WriteLiteral(" for=\"gear\"");

WriteLiteral("></label>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-10\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"yearModel\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Year Model\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"yearModel\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"yearModel:required\"");

WriteLiteral(">Year Model is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"color\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Color\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"color\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"color:required\"");

WriteLiteral(">Color is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"kilometer\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Kilometer\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"kilometer\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"kilometer:required\"");

WriteLiteral(">Kilometer is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"fuel\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Fuel\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"fuel\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"fuel:required\"");

WriteLiteral(">Fuel is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"importSource\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Import Source \"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"importSource\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"importSource:required\"");

WriteLiteral(">Import Source is required.</div>\n            </div>\n\n            <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <input");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"price\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Price\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral(" />\n                <label");

WriteLiteral(" for=\"price\"");

WriteLiteral("></label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"price:required\"");

WriteLiteral(">Price is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"mb-3\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"form-check form-switch\"");

WriteLiteral(">\n                    <input");

WriteLiteral(" class=\"form-check-input\"");

WriteLiteral(" id=\"mojaz\"");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"mojaz\"");

WriteLiteral(" />\n                    <label");

WriteLiteral(" class=\"form-check-label\"");

WriteLiteral(" for=\"mojaz\"");

WriteLiteral(">Mojaz</label>\n                </div>\n            </div>\n            <div");

WriteLiteral(" class=\"mb-3\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"form-check form-switch\"");

WriteLiteral(">\n                    <input");

WriteLiteral(" class=\"form-check-input\"");

WriteLiteral(" id=\"ownershipVerification\"");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"ownershipVerification\"");

WriteLiteral(" />\n                    <label");

WriteLiteral(" class=\"form-check-label\"");

WriteLiteral(" for=\"ownershipVerification\"");

WriteLiteral(">Ownership Verification </label>\n                </div>\n            </div>\n      " +
"      <div");

WriteLiteral(" class=\"form-floating mb-3\"");

WriteLiteral(">\n                <textarea");

WriteLiteral(" class=\"form-control\"");

WriteLiteral(" id=\"typeYourCarInfoHere\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"Type your car info here\"");

WriteLiteral(" style=\"height: 10rem;\"");

WriteLiteral(" data-sb-validations=\"required\"");

WriteLiteral("></textarea>\n                <label");

WriteLiteral(" for=\"typeYourCarInfoHere\"");

WriteLiteral(">Type your car info here</label>\n                <div");

WriteLiteral(" class=\"invalid-feedback\"");

WriteLiteral(" data-sb-feedback=\"typeYourCarInfoHere:required\"");

WriteLiteral(">Type your car info here is required.</div>\n            </div>\n            <div");

WriteLiteral(" class=\"d-none\"");

WriteLiteral(" id=\"submitSuccessMessage\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"text-center mb-3\"");

WriteLiteral(">\n                    <div");

WriteLiteral(" class=\"fw-bolder\"");

WriteLiteral(">Form submission successful!</div>\n                </div>\n            </div>\n    " +
"        <div");

WriteLiteral(" class=\"d-none\"");

WriteLiteral(" id=\"submitErrorMessage\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"text-center text-danger mb-3\"");

WriteLiteral(">Error sending message!</div>\n            </div>\n            <div");

WriteLiteral(" class=\"d-grid\"");

WriteLiteral(">\n                <button");

WriteLiteral(" class=\"btn btn-primary btn-lg disabled\"");

WriteLiteral(" id=\"submitButton\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(">Submit</button>\n            </div>\n        </form>\n    </div>\n\n</body>\n\n</html>\n" +
"\n\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class createBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
